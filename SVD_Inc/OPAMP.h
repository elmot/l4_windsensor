// Operational amplifiers
 extern struct {
// OPAMP1 control/status register
 struct {
      unsigned int OPAEN: 1; // Operational amplifier               Enable
      unsigned int OPALPM: 1; // Operational amplifier Low Power               Mode
      unsigned int OPAMODE: 2; // Operational amplifier PGA               mode
      unsigned int PGA_GAIN: 2; // Operational amplifier Programmable               amplifier gain value
      unsigned int : 2; // Reserved
      unsigned int VM_SEL: 2; // Inverting input selection
      unsigned int VP_SEL: 1; // Non inverted input               selection
      unsigned int : 1; // Reserved
      unsigned int CALON: 1; // Calibration mode enabled
      unsigned int CALSEL: 1; // Calibration selection
      unsigned int USERTRIM: 1; // allows to switch from               ?????????????????????????????????????????????????????????????????????????factory??????????????????????????????????????????????????????????????????????????????????               AOP offset trimmed values to AOP offset               ?????????????????????????????????????????????????????????????????????????user??????????????????????????????????????????????????????????????????????????????????
      unsigned int CALOUT: 1; // Operational amplifier calibration               output
      unsigned int : 15; // Reserved
      unsigned int OPA_RANGE: 1; // Operational amplifier power supply range               for stability
} OPAMP1_CSR;
// OPAMP1 offset trimming register in normal           mode
 struct {
      unsigned int TRIMOFFSETN: 5; // Trim for NMOS differential               pairs
      unsigned int : 3; // Reserved
      unsigned int TRIMOFFSETP: 5; // Trim for PMOS differential               pairs
      unsigned int : 19; // Reserved
} OPAMP1_OTR;
// OPAMP1 offset trimming register in low-power           mode
 struct {
      unsigned int TRIMLPOFFSETN: 5; // Trim for NMOS differential               pairs
      unsigned int : 3; // Reserved
      unsigned int TRIMLPOFFSETP: 5; // Trim for PMOS differential               pairs
      unsigned int : 19; // Reserved
} OPAMP1_LPOTR;
      unsigned int : 32; // Reserved
// OPAMP2 control/status register
 struct {
      unsigned int OPAEN: 1; // Operational amplifier               Enable
      unsigned int OPALPM: 1; // Operational amplifier Low Power               Mode
      unsigned int OPAMODE: 2; // Operational amplifier PGA               mode
      unsigned int PGA_GAIN: 2; // Operational amplifier Programmable               amplifier gain value
      unsigned int : 2; // Reserved
      unsigned int VM_SEL: 2; // Inverting input selection
      unsigned int VP_SEL: 1; // Non inverted input               selection
      unsigned int : 1; // Reserved
      unsigned int CALON: 1; // Calibration mode enabled
      unsigned int CALSEL: 1; // Calibration selection
      unsigned int USERTRIM: 1; // allows to switch from               ?????????????????????????????????????????????????????????????????????????factory??????????????????????????????????????????????????????????????????????????????????               AOP offset trimmed values to AOP offset               ?????????????????????????????????????????????????????????????????????????user??????????????????????????????????????????????????????????????????????????????????
      unsigned int CALOUT: 1; // Operational amplifier calibration               output
      unsigned int : 16; // Reserved
} OPAMP2_CSR;
// OPAMP2 offset trimming register in normal           mode
 struct {
      unsigned int TRIMOFFSETN: 5; // Trim for NMOS differential               pairs
      unsigned int : 3; // Reserved
      unsigned int TRIMOFFSETP: 5; // Trim for PMOS differential               pairs
      unsigned int : 19; // Reserved
} OPAMP2_OTR;
// OPAMP2 offset trimming register in low-power           mode
 struct {
      unsigned int TRIMLPOFFSETN: 5; // Trim for NMOS differential               pairs
      unsigned int : 3; // Reserved
      unsigned int TRIMLPOFFSETP: 5; // Trim for PMOS differential               pairs
      unsigned int : 19; // Reserved
} OPAMP2_LPOTR;
} SVD_OPAMP;
asm(".equ SVD_OPAMP, 0x40007800");
